.fullComments(data-bind="with: repository[M!M]")
	.cmtsHead
		//ko if: canReply() || count()
		a.count.headElem.interact(href="?hl=comments", data-bind="html: count() + (countNew() ? '<span class=\"cnew\"> +' + countNew() + '</span>' : '')", title="Ссылка на область комментариев")
		//ko if: canReply()
		.addZero.headElem.interact.strokeBefore(data-bind="click: replyZero", title="Добавить комментарий первого уровня")
			span.glyphicon.glyphicon-edit
			|  Добавить
		// /ko
		//ko if: !auth.loggedIn()
		.addZero.headElem.interact.strokeBefore(data-bind="click: function(data, evt){auth.show('login')}", title="Кликните, чтобы войти или зарегистрироваться")
			span.glyphicon.glyphicon-log-in
			| &nbsp;&nbsp;sВойдите, чтобы поделиться мнением
		// /ko
		//ko if: auth.loggedIn()
		.commSubscr.headElem.interact.strokeBefore(data-bind="click: subscribe, css: {isSubscr: subscr()}, attr: {title: subscr() ? 'Вы подписаны на новые комментарии. Нажмите, чтобы отписаться' : 'Подписаться на новые комментарии'}")
			span.glyphicon.glyphicon-envelope
			span(data-bind="text: subscr() ? ' Отписаться' : ' Подписаться'")
		// /ko
		//ko if: canModerate()
		.noComments.headElem.interact(data-bind="click: setNoComments, attr: {title: (nocomments() ? 'Разрешить' : 'Запретить')+' дальнейшее комментирование'}")
			span.glyphicon(data-bind="css: nocomments() ? 'glyphicon-ok-sign' : 'glyphicon-minus-sign'")
			span(data-bind="text: nocomments() ? ' Разрешить комментирование' : ' Запретить комментирование'")
		// /ko
		//ko if: auth.loggedIn() && nocomments()
		span.cantComment Комментирование запрещено
		// /ko
		.commentsLoad(data-bind="style: {display: loading() ? '' : 'none'}") &nbsp;
		// /ko

	.cmts

	//ko if: showTree()
	ul.media-list(data-bind="css: {loggedIn: canReply(), canFrag: canFrag}")
		//ko template: {name: canReply() ? 'tplCommentCanReply' : 'tplComment', foreach: comments}
		// /ko
		//ko if: canReply()
		//ko template: {name: 'tplReply', data: dataForZeroReply}
		// /ko
		// /ko
	// /ko


	//ko if: countNew()
	.navigator(data-bind="css: {touch: touch}")
		.arrow
		.navigatorInn
			.countAll(data-bind="text: '+' + countNew()")
			.up(data-bind="click: navUp")
				span.glyphicon.glyphicon-arrow-up
				.navTxt
			.down(data-bind="click: navDown")
				.navTxt
				span.glyphicon.glyphicon-arrow-down
	// /ko

	| <script id="tplComment" type="text/html">
	li.media(data-bind="attr: {'data-cid': $data.cid}, css: {isnew: !$parent.isnew && $data.isnew}")
		a.pull-left(data-bind="attr: {href: '/u/' + $data.user.login}")
			img.media-object(data-bind="attr: {src: $data.user.avatar}")
		.media-body
			//ko template: 'tplCommentBody'
			// /ko
			//ko template: {name: 'tplComment', foreach: $data.comments }
			// /ko
	| </script>

	| <script id="tplCommentBody" type="text/html">
	.commentBody
		.commentHead
			a.author(data-bind="attr: {href: '/u/' + $data.user.login}, text: $data.user.disp, css: {online: $data.user.online}")
			//ko if: $data.user.rnks
			.ranks(data-bind="html: $data.user.rnks")
			// /ko
			//ko if: $data.frag
			.dotDelimeter ·
			a.frag(data-bind="attr: {href: '?hl=frag-' + $data.cid}")
				span.glyphicon.glyphicon-picture
				|  Комментируемый фрагмент
			// /ko
			.dotDelimeter ·
			a.stamp(data-bind="attr: {href: '?hl=comment-' + $data.cid}, text: moment($data.stamp).calendar()")
			//ko if: $data.lastChanged
			.dotDelimeter ·
			.changed(data-bind="text: 'Изменен ' + moment($data.lastChanged).calendar().toLowerCase(), click: function () {$parents[$data.level].showHistory($data.cid)}", title="Показать историю изменений")
			// /ko
		.commentText(data-bind="html: $data.txt")
	| </script>

	| <script id="tplCommentCanReply" type="text/html">
	li.media(data-bind="attr: {'data-cid': $data.cid}, css: {commentAdd: $data.cid === $parents[$data.level].commentEditingCid(), isnew: !$parent.isnew && $data.isnew}")
		a.pull-left(data-bind="attr: {href: '/u/' + $data.user.login}")
			img.media-object(data-bind="attr: {src: $data.user.avatar}")
		.media-body
			//ko template: {name: $data.cid === $parents[$data.level].commentEditingCid() ? 'tplReplyBody' : 'tplCommentBodyCanReply'}
			// /ko
			//ko template: {name: 'tplCommentCanReply', foreach: $data.comments }
			// /ko
			//ko if: $data.cid === $parents[$data.level].commentReplyingToCid()
			//ko template: 'tplReply'
			// /ko
			// /ko
	| </script>

	| <script id="tplCommentBodyCanReply" type="text/html">
	.commentBody
		.commentHead
			a.author(data-bind="attr: {href: '/u/' + $data.user.login}, text: $data.user.disp, css: {online: $data.user.online}")
			//ko if: $data.user.rnks
			.ranks(data-bind="html: $data.user.rnks")
			// /ko
			//ko if: $data.frag
			.dotDelimeter ·
			a.frag(data-bind="attr: {href: '?hl=frag-' + $data.cid}")
				span.glyphicon.glyphicon-picture
				|  Комментируемый фрагмент
			// /ko
			.dotDelimeter ·
			a.stamp(data-bind="attr: {href: '?hl=comment-' + $data.cid}, text: moment($data.stamp).calendar()")
			//ko if: $data.lastChanged
			.dotDelimeter ·
			.changed(data-bind="text: 'Изменен ' + moment($data.lastChanged).calendar().toLowerCase(), click: function () {$parents[$data.level].showHistory($data.cid)}", title="Показать историю изменений")
			// /ko
		.commentText(data-bind="html: $data.txt")
		.commentActions
			span.commentAction.reply(data-bind="click: $parents[$data.level].replyBind") Ответить
			//ko if: $parents[$data.level].canModeratePlain || $data.can.edit
			.dotDelimeter ·
			span.commentAction.edit(data-bind="click: $parents[$data.level].editBind") Редактировать
			// /ko
			//ko if: $parents[$data.level].canModeratePlain || $data.can.del
			.dotDelimeter ·
			span.commentAction.remove(data-bind="click: $parents[$data.level].removeBind") Удалить
			// /ko
	| </script>

	| <script id="tplReply" type="text/html">
	li.media.commentAdd
		a.pull-left(target="_blank", data-bind="attr: {href: '/u/' + $parents[$data.level].auth.iAm.login()}")
			img.media-object(data-bind="attr: {src: $parents[$data.level].auth.iAm.avatarth()}")
		.media-body(data-bind="template: 'tplReplyBody'")
	| </script>

	| <script id="tplReplyBody" type="text/html">
	textarea.form-control.commentInput(wrap="soft")
	.commentInputLabel
		//ko if: !!$data.parent || !$data.comments().length
		| Нажмите, чтобы написать комментарий
		// /ko
		//ko if: !$data.parent && $data.comments().length
		| Нажмите, чтобы написать комментарий первого уровня
		br
		small(style="font-style: italic") Чтобы ответить на существующий комментарий, нажмите под ним кнопку Ответить
		// /ko
	form.form-inline
		button.btn.btn-success.btn-sm.btnCommentSend(type="button", data-bind="css: {disabled: $parents[$data.level].exe()}, click: $parents[$data.level].sendBind, attr: {disabled: $parents[$data.level].exe()}")
			span.glyphicon.glyphicon-comment
			|  Отправить
		button.btn.btn-warning.btn-sm.btnCommentCancel(type="button", data-bind="css: {disabled: $parents[$data.level].exe()}, click: $parents[$data.level].cancelBind, attr: {disabled: $parents[$data.level].exe()}")
			span.glyphicon.glyphicon-remove
			|  Отмена
		button.btn.btn-primary.btn-sm.btnCommentFrag(type="button", data-bind="css: {disabled: $parents[$data.level].exe()}, click: $parents[$data.level].fragClickBind, attr: {disabled: $parents[$data.level].exe()}")
			span.glyphicon.glyphicon-picture
			|  Фрагмент
		// ko if: $parents[$data.level].fraging()
		button.btn.btn-primary.btn-sm.btnCommentFragDel(type="button", data-bind="css: {disabled: $parents[$data.level].exe()}, click: $parents[$data.level].fragDeleteBind, attr: {disabled: $parents[$data.level].exe()}")
			span.glyphicon.glyphicon-remove
			|  Очистить фрагмент
		// /ko
		.checkbox.replySubscr
			// ko if: $parents[$data.level].subscr()
			| Вы подписаны на новые комментарии в данной теме
			// /ko
			// ko ifnot: $parents[$data.level].subscr()
			//- Устанавливаем checked как атрибут, чтобы его нажатие не изменяло настройку пользователя
			label
				input.chkSubscr(type="checkbox", data-bind="attr:{checked: $parents[$data.level].auth.iAm.settings.subscr_auto_reply() ? 'checked' : null}, event: {click: $parents[$data.level].chkSubscrClickBind}")
				span(style="vertical-align: top;")  Подписаться на тему
			// /ko
	| </script>