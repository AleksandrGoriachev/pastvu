doctype 5
html
	include includes/head_meta
		script(type='text/javascript', src="/js/knockout-2.1.0.js")
		script(type='text/javascript', src="/js/knockout.mapping-latest.js")
		script(type='text/javascript', src="/js/mvvm/User.js")
		script(type='text/javascript', src="/js/mvvm/TopPanel.js")
		script(type='text/javascript', src="/js/jquery.datepick/jquery.datepick.js")
		script(type='text/javascript', src="/js/jquery.datepick/jquery.datepick.lang.js")
		link(rel="stylesheet", type="text/css", href="/js/jquery.datepick/redmond.datepick.css?appv=" + appVersion)

		script(type='text/javascript').
			var socket,
				profileView,
				profileVM,
				iAmVM;
				
			var GlobalParams = {
					Width: Utils.getClientWidth(),
					Height: Utils.getClientHeight(),
					
					USE_OSM_API: true,
					USE_GOOGLE_API: true,
					USE_YANDEX_API: true,
					appVersion: 0,
					verBuild: 0,
					
					REGISTRATION_ALLOWED: false,
					LoggedIn: false
				},
				GlobalParamsVM;	
			function GlobalParamsToKO(){
				if (!GlobalParamsVM) GlobalParamsVM = ko.mapping.fromJS(GlobalParams);
				else ko.mapping.fromJS(GlobalParams, GlobalParamsVM);
			}
			
			var i18n = {
				en : {
					login : 'Login',
					logout : 'Logout',
					register : 'Registration',
					admin : 'Administration'
				},
				ru : {
				}
			};
			var i18nVM;
			function i18nToKO(lang){
				if (!i18nVM) i18nVM = ko.mapping.fromJS(i18n[lang]);
				else ko.mapping.fromJS(i18n[lang], i18nVM);
			}
			function Logout(){
				socket.on('logoutResult', function (json) {
					if (json.err){
						consol.log('Logout error' + json.err);
					}else {
						document.location = json.logoutPath;
					}
					
				});
				socket.emit('logoutRequest', {});
				return false;
			}
			$(document).ready(function() {
				i18nToKO('en');
				profileView = document.getElementById('userProfile');
				socket = io.connect(location.host);
				socket.on('connect', function () {
					socket.on('initMessage', function (json) {
						var init_message = json.init_message;
					});
					
					socket.on('takeUser', function (user) {
						profileVM = UserUpdate(user, profileVM);
						
						profileVM.edit = ko.observable(false);
						
						profileVM.originUser = user;
						
						profileVM.canBeEdit = ko.computed(function() {
							return iAmVM.login()==this.login() || iAmVM.role_level() >= 50;
						}, profileVM);
						
						profileVM.edit_mode = ko.computed(function() {
							return this.canBeEdit() && this.edit();
						}, profileVM);
						profileVM.edit_mode.subscribe(function(val){
							if (val){
								document.body.classList.add('edit_mode');
								window.setTimeout(function(){$('#in_birthdate').datepick($.extend({format: 'yyyy-mm-dd'}, $.datepick.regional['ru']));}, 1000);
								
							}else{
								document.body.classList.remove('edit_mode');
							}
						});
						
						profileVM.can_pm = ko.computed(function() {
							return iAmVM.login()!=this.login();
						}, profileVM);
						
						ko.applyBindings(profileVM, profileView);
						
						CreateTopPanelVM();
						BindTopPanelVM();
						
						profileView.classList.add('show');
						
					});
					socket.on('youAre', function (user) {
						console.dir(user);
						GlobalParams.LoggedIn = !!user;
						GlobalParamsToKO();
						iAmVM = UserUpdate(user, iAmVM);
						socket.emit('giveUser', {login: location.href.substring(location.href.indexOf('/u/')+3)});
					});
					socket.emit('whoAmI', {});
				});
			});
			function saveUser(){
				var targetUser = ko.mapping.toJS(profileVM)
				console.dir(targetUser);
				for(var key in targetUser) {
					if (targetUser.hasOwnProperty(key) && key != 'login') {
						if (profileVM.originUser[key] && targetUser[key]==profileVM.originUser[key]) delete targetUser[key];
						else if (!profileVM.originUser[key] && targetUser[key]==DefaultUser[key]) delete targetUser[key];
					}
				}
				if (Utils.getObjectPropertyLength(targetUser)>1) socket.emit('saveUser', targetUser);
				profileVM.edit(false);
			}
		link(rel="stylesheet", type="text/css", href="/style/profile.css?appv=" + appVersion)
		script(type='text/javascript', src="/style/profile.js?appv=" + appVersion)
	body
		include includes/top
		div#userProfile(data-bind="css: {edit_mode: edit_mode()}")
			div#leftSide
				div#avatar.fringe
					div.inner_bord(data-bind="style: {backgroundImage: 'url('+avatar()+')'}")
						div#avatar_edit(data-bind="style: {display: edit_mode() ? '' : 'none'}")
							div#avatar_edit_pic
							| Change avatar
				div#pm.fringe(data-bind="style: {display:  can_pm() ? 'block': 'none'}")
					div.inner_bord
						| Send message
				div#edit.fringe(data-bind="style: {display: canBeEdit() ? 'block': 'none'}, event: {click: function(data, event) { if (!data.edit_mode()){data.edit(true)}else{saveUser()}}}")
					div.inner_bord(data-bind="text: edit_mode() ? 'Save profile' : 'Edit profile'")
				div#info_common.block
					div.head
						| Commons
					div.h_separator
					div.row
						div.left
							| Group:
						div.right
							| Administrators
					div.row
						div.left
							| Registration:
						div.right
							| 01.01.2007
					div.row
						div.left
							| Status:
						div.right
							| Online
				div#short_stat.block
					div.head
						| Brief statistics
					div.h_separator
					div.row
						div.left
							| Photo uploaded:
						div.right
							| 77
					div.row
						div.left
							| Blogs created:
						div.right
							| 10
					div.row
						div.left
							| Favorite areas:
						div.right
							| 20
					div.row
						div.left
							| Comments:
						div.right
							| 108
				div#leftSideDash
			div#mainSide
				ul.nav.nav-tabs
					li.active
						a(href='#') Information
					li
						a(href='#') Photo
					li
						a(href='#') Blogs
					li
						a(href='#') Comments
				div#info
					div.row
						div.left
							| Name:
						div.right
							input(type='text', data-bind="attr: {disabled: !edit_mode()}, style: {display: edit_mode() ? '' : 'none'}, value: firstName, valueUpdate: 'afterkeydown'")
							input(type='text', data-bind="attr: {disabled: !edit_mode()}, style: {display: edit_mode() ? '' : 'none'}, value: lastName, valueUpdate: 'afterkeydown'")
							span(data-bind="text: fullName(), style: {display: !edit_mode() ? '' : 'none'}")
					div.row
						div.left
							| Birthday:
						div.right
							input(type='text', id='in_birthdate', data-bind="attr: {disabled: !edit_mode()}, style: {display: edit_mode() ? 'block' : 'none'}, value: birthdate")
							span(data-bind="text: birthdate(), style: {display: !edit_mode() ? '' : 'none'}")
					div.row
						div.left
							| Sex:
						div.right
							input(type="radio", name="sex", value="male", data-bind="checked: sex")
							<span data-bind="style: {display: (edit_mode() || sex()=='male' ? 'inline' : 'none')}">Male</span>
							input(type="radio", name="sex", value="female", data-bind="checked: sex")
							<span data-bind="style: {display: (edit_mode() || sex()=='female' ? 'inline' : 'none')}">Female</span>
					div.row
						div.left
							| Residence:
						div.right
							input(type='text', data-bind="attr: { size: country().length, disabled: !edit_mode()}, style: {display: edit_mode() ? '' : 'none'}, value: country, valueUpdate: 'afterkeydown'")
							input(type='text', data-bind="attr: { size: city().length+1, disabled: !edit_mode()}, style: {display: edit_mode() ? '' : 'none'}, value: city, valueUpdate: 'afterkeydown'")
							span(data-bind="text: country()+', '+city(), style: {display: !edit_mode() ? '' : 'none'}")
					div.row
						div.left
							| Interested in:
						div.right
							input(type='text', data-bind="attr: { size: work().length, disabled: !edit_mode() }, value: work, valueUpdate: 'afterkeydown'")
					div.row
						div.left
							| Website:
						div.right
							input(type='text', data-bind="attr: { size: www().length, disabled: !edit_mode() }, value: www, valueUpdate: 'afterkeydown'")
					div.row
						div.left
							| ICQ:
						div.right
							input(type='text', data-bind="attr: { size: icq().length, disabled: !edit_mode() }, value: icq, valueUpdate: 'afterkeydown'")
					div.row
						div.left
							| Skype:
						div.right
							input(type='text', data-bind="attr: { size: skype().length, disabled: !edit_mode() }, value: skype, valueUpdate: 'afterkeydown'")
					div.row
						div.left
							| aim:
						div.right
							input(type='text', data-bind="attr: { size: aim().length, disabled: !edit_mode() }, value: aim, valueUpdate: 'afterkeydown'")
					div.row
						div.left
							| LJ:
						div.right
							input(type='text', data-bind="attr: { size: lj().length, disabled: !edit_mode() }, value: lj, valueUpdate: 'afterkeydown'")
					div.row
						div.left
							| flickr:
						div.right
							input(type='text', data-bind="attr: { size: flickr().length, disabled: !edit_mode() }, value: flickr, valueUpdate: 'afterkeydown'")
					div.row
						div.left
							| Blogger:
						div.right
							input(type='text', data-bind="attr: { size: blogger().length, disabled: !edit_mode() }, value: blogger, valueUpdate: 'afterkeydown'")
					div.row
						div.left
							| About Me:
						div.right
							input(type='text', data-bind="attr: { size: aboutme().length, disabled: !edit_mode() }, value: aboutme, valueUpdate: 'afterkeydown'")
