.photo(data-bind="with: repository[M!M]")
    .row.photoData(data-bind="css: {editMode: edit()}")
        .col-xs-12.col-sm-8.col-lg-8.photoPanel
            //ko if: can.edit()
            .topInfo
                .photoAction(data-bind="template: {name: edit() ? 'photoActionsEdit' : 'photoActionsView'}")
                //ko if: !edit() && can.convert()
                .photoAction
                    button.btn.btn-primary(data-bind="click: toConvert, attr: {disabled: exe()}")
                        span.glyphicon.glyphicon-refresh
                        |  Reconvert image
                // /ko
            // /ko
            //ko if: msg().length
            .photoMsg.label(data-bind="css: msgCss(), attr: {title: msgTitle()}")
                span.glyphicon.glyphicon-warning-sign
                span(data-bind="text: ' ' + msg()")
                //ko if: msgLink()
                |  [
                a.msgLink(data-replace="true", data-bind="attr: {href: msgLink()}") More details..
                | ]
                // /ko
            // /ko
            .imgRow
                .imgSuperWrap
                    .imgMiddleWrap(data-bind="css: {loading: photoLoading(), fragSensitive: !edit() && !fraging()}")
                        .imgWrap(data-bind="style: {height: (watermarkShow() ? hsfull() : hs()) + 'px'}")
                            img.photoImg(data-bind="attr: {src: photoSrc(), title: p.title()}, style: {height: hsfull() + 'px'}")
                        //ko if: !edit()
                        .fragsWrap(data-bind="style: {bottom: (watermarkShow() ? waterhs() : 0) + 'px'}")
                            //ko foreach: p.frags
                            a.photoFrag(data-bind="attr: {'data-cid': $data.cid(), href: '?hl=comment-' + $data.cid()}, style: {top: $data.t() + '%', left: $data.l() + '%', width: $data.w() + '%', height: $data.h() + '%', zIndex: 10 + (10000 / ($data.w() * $data.h())) >> 0}")
                            // /ko
                        // /ko
                        .photoLoading
                    .toolsRht
                        .tool.watched
                            span.glyphicon.glyphicon-eye-open.light(title="Number of photo's views")
                            .watch(data-bind="text: toolsNumFormat(p.vdcount()), attr: {title: p.vdcount()+ ' times viewed today'}")
                            .watch(data-bind="text: toolsNumFormat(p.vwcount()), attr: {title: p.vwcount()+ ' times viewed this week'}")
                            .watch(data-bind="text: toolsNumFormat(p.vcount()), attr: {title: p.vcount()+ ' times viewed total'}")
                    .toolsBtm(data-bind="style: {width: ws() + 'px'}")
                        span.toolsTxt
                            | Размеры:&nbsp;
                            //ko if: ws() !== p.ws() && hs() !== p.hs()
                            .sizeThis(data-bind="text: ws() + '×' + hs()")
                            | &nbsp;|&nbsp;
                            // /ko
                            a.sizeStandard(target="_blank", data-bind="attr:{href: '/_p/d/' + p.file()}, text: p.ws() + '×' + p.hs()")
                            | &nbsp;|&nbsp;
                            a.sizeOrigin(target="_blank", data-bind="attr:{href: '/_p/a/' + p.file()}, text: p.w() + '×' + p.h()")
                        //ko if: hscalePossible()
                        button.btn.btn-xxs.btn-primary(data-state="hscaleTumbler", data-bind="css: {active: hscaleTumbler()}, click: stateChange", title="Adjust by the height of the visible area")
                            span.glyphicon.glyphicon-resize-vertical
                        // /ko
                        button.btn.btn-xxs.btn-primary(data-state="watermarkShow", data-bind="css: {active: watermarkShow()}, click: stateChange", title="Show photo's watermark")
                            | W
                        //ko if: p.s()===statuses.keys.PUBLIC
                        a.btn.btn-xxs.btn-primary(href="?share=1", data-replace="true", title="Share")
                            span.glyphicon.glyphicon-share-alt
                        // /ko
                        //ko if: !edit()
                        a.btn.btn-xxs(data-bind="click:download,css: downloadCSSClass(), attr: {href:'/_p/a/'+p.file(), download:p.cid()+' '+(p.title()||'').replace(/[\/|]/g, '-')+'.jpg', title:'Download '+(downLoadOrigin()?'original ':'full size ')+p.w() + '×' + p.h()}")
                            span.glyphicon.glyphicon-save
                        // /ko

            //ko template: {name: edit() ? 'photoEdit' : 'photoView', afterRender: tplAfterRender}
            // /ko
        .col-xs-12.col-sm-4.col-lg-4.rightPanel
            table.rightrow.tableUser(cellpadding="0"): tbody: tr
                td(style="width: 85px; min-width: 85px;")
                    a.avatar.fringe.plain(data-bind="attr: {href: '/u/' + p.user.login()}")
                        img(data-bind="attr: {src: p.user.avatar()}, event: {load: onImgLoad, error: onAvatarError}")
                td
                    .userInfo(data-bind="html: userInfo() + rnks()")
                    //ko if: userRibbon().length
                    .userRibbon.photoTiles
                        //ko foreach: userRibbon
                        a.photoPreview.withStatus(data-bind="attr: {href: '/p/' + cid, title: $data.title}, style: {marginRight: $parent.thumbM}, css: 's' + $data.s")
                            .photoBox
                                img.img(data-bind="attr: {src: sfile, title: $data.title}, event: {load: $parent.onPreviewLoad, error: $parent.onPreviewErr}, style: {width: $parent.thumbW, height: $parent.thumbH}")
                                .curtain
                                //ko if: status.icon
                                .status.fringe(data-bind="attr: {title: status.tip}")
                                    span.glyphicon(data-bind="css: status.icon")
                                // /ko
                        // /ko
                    // /ko
            .rightrow.photoMap.mContainer.mHidden(data-bind="allowBindings: false, style: {height: mapH()}")
            //ko if: nearestRibbon().length
            .rightrow: .lineBehind: span Nearest photos
            .rightrow.nearesTiles(data-bind="foreach: nearestRibbon")
                a.photoPreview(data-bind="attr: {href: '/p/' + cid, title: $data.title}"): .photoBox
                    img.img(data-bind="attr: {src: sfile, title: $data.title}, event: {load: $parent.onPreviewLoad, error: $parent.onPreviewErr}, style: {width: $parent.thumbW, height: $parent.thumbH}")
                    .curtain
            // /ko
        .commentsContainer.mContainer.mNoDisplay(data-bind="allowBindings: false")

    //-ACTIONS VIEW MODE
    | <script id="photoActionsView" type="text/html">
    //ko if: can.edit()
    button.btn.btn-primary(type="button", data-bind="click: editSave, attr: {disabled: exe()}")
        span.glyphicon.glyphicon-pencil
        |  Edit
    // /ko
    //ko if: can.ready()
    button.btn.btn-success(type="button", title="Send to premoderation and further publishing", data-bind="click: ready, attr: {disabled: exe()}")
        span.glyphicon.glyphicon-check
        |  To publishing
    // /ko
    //ko if: can.approve()
    button.btn.btn-success(type="button", title="Confirm and publish this photo", data-bind="click: approve, attr: {disabled: exe()}")
        span.glyphicon.glyphicon-ok
        |  Publish
    // /ko
    //ko if: can.revision()
    button.btn.btn-warning(type="button", title="Send to user for revision", data-bind="click: toRevision, attr: {disabled: exe()}")
        span.glyphicon.glyphicon-check
        |  To revision
    // /ko
    //ko if: can.revoke()
    button.btn.btn-danger(type="button", data-bind="click: revoke, attr: {disabled: exe()}", title="Revoke this photo from possible publication")
        span.glyphicon.glyphicon-remove
        |  Revoke
    // /ko
    //ko if: can.reject()
    button.btn.btn-danger(type="button", data-bind="click: reject, attr: {disabled: exe()}", title="Reject this photo from possible publication")
        span.glyphicon.glyphicon-remove
        |  Reject
    // /ko
    //ko if: can.activate()
    button.btn.btn-success(type="button", data-bind="click: toggleDisable, attr: {disabled: exe()}")
        span.glyphicon.glyphicon-ok-sign
        |  Activate
    // /ko
    //ko if: can.deactivate()
    button.btn.btn-warning(type="button", data-bind="click: toggleDisable, attr: {disabled: exe()}")
        span.glyphicon.glyphicon-exclamation-sign
        |  Deactivate
    // /ko
    //ko if: can.remove()
    button.btn.btn-danger(type="button", data-bind="click: remove, attr: {disabled: exe()}")
        span.glyphicon.glyphicon-trash
        |  Remove
    // /ko
    //ko if: can.restore()
    button.btn.btn-success(type="button", data-bind="click: restore, attr: {disabled: exe()}")
        span.glyphicon.glyphicon-repeat
        span  Restore
    // /ko
    | </script>

    //-ACTIONS EDIT MODE
    | <script id="photoActionsEdit" type="text/html">
    button.btn.btn-success(type="button", data-bind="click: editSave, attr: {disabled: exe()}")
        span.glyphicon.glyphicon-ok
        |  Save
    button.btn.btn-danger(type="button", data-bind="click: editCancel, attr: {disabled: exe()}")
        span.glyphicon.glyphicon-remove
        |  Cancel editing
    | </script>

    //-DATA VIEW MODE
    | <script id="photoView" type="text/html">
    .infoBlock
        //ko if: p.title().length
        .info.title(data-bind="text: p.title()")
        // /ko

        div
            //ko if: p.y()
            span.years(data-bind="html: p.y()")
            // /ko
            //ko if: p.y() && p.regions().length
            =', '
            // /ko
            //ko if: p.regions().length
            //ko foreach: p.regions
            | <!--ko if: $index()-->, <!-- /ko -->
            .region
                a(data-bind="text: $data.title_en(), attr: {href: '/ps?f=r!' + $data.cid()}")
            // /ko
            //ko if: !p.geo()
            =', '
            .region
                a(data-bind="text: 'Where is it?', attr: {href: '/ps?f=geo!0_r!' + p.regions()[p.regions().length-1].cid()}", style="color: #BEA265;")
            // /ko
            // /ko
        //ko if: p.desc().length
        .info(data-bind="html: p.desc()")
        // /ko
    .infoBlock
        //ko if: p.author().length
        .info
            span.infoName(data-bind="html: fields.author+':'")
            span(data-bind="html: p.author()")
        // /ko
        //ko if: p.source().length
        .info
            span.infoName(data-bind="html: fields.source+':'")
            span(data-bind="html: p.source()")
        // /ko
        //ko if: p.address().length
        .info
            span.infoName(data-bind="html: fields.address+':'")
            span(data-bind="text: p.address()")
        // /ko
        //ko if: p.dir && p.dir() && p.dir().length
        .info
            span.infoName(data-bind="html: fields.dir+':'")
            span(data-bind="text: fields.dirVals[p.dir()]", style="text-transform: lowercase;")
        // /ko
        //ko if: p.watersignText() && p.watersignTextApplied()
        .info
            span.infoName(data-bind="html: fields.watersign.title+':'")
            span(data-bind="text: p.watersignText()")
        // /ko
    //ko if: p.cdate
    .infoBlock
        .info
            a(href="?history=1", data-replace="true", data-bind="css: {changed: p.changed()}, html: 'Last changed at ' + fDateIn(p.cdate())")
    // /ko

    //-a.help.visible-lg(href="http://start.planeta.ru/campaigns/1694", target="_blank", title="Узнайте как помочь проекту")
        img.helpimg(src="/img/misc/fund2/bnline.jpg", title="Помогите PastVu")
    | </script>

    //-EDIT MODE
    | <script id="photoEdit" type="text/html">
    .fieldWrap.mandatory(data-bind="css: {hasContent: p.title().length}")
        label(for="pName", data-bind="html: fields.title")
        input.form-control.title(name="pName", type="text", maxlength="120", placeholder="Enter photo titile", data-bind="value: p.title, valueUpdate: 'afterkeydown', event: {focus: inputlblfocus, blur: inputlblblur}")
    .fieldWrap.asrow
        .yearsEdit.mandatory(data-bind="css: {hasContent: !!p.year()}")
            span.infoName(data-bind="html: fields.y+':'")
            input.form-control.year(type="text", data-bind="value: p.year, valueUpdate: 'keyup', event: {blur: yearCheck}", maxlength="4")
            | —
            input.form-control.year(type="text", data-bind="value: p.year2, valueUpdate: 'keyup', event: {blur: year2Check}", maxlength="4")
        .regions(data-bind="css: {loading: exeregion()}")
            span.infoName.mandatory(data-bind="html: fields.regions+':'")
            //ko if: p.regions().length
            span(data-bind="foreach: p.regions")
                .region
                    a(target="_blank", data-bind="text: ' ' + $data.title_en(), attr: {href: '/ps?f=r!' + $data.cid()}")
                //ko if: $index() < $parent.p.regions().length - 1
                | ,&#32;
                // /ko
            // /ko
            //ko if: !p.regions().length
            .region.err Not specified
            // /ko
            //ko if: !p.geo()
            span.regionEdit(data-bind="click: regionSelect")
                | [Select]
            // /ko
    .fieldWrap(data-bind="css: {hasContent: p.desc().length}")
        label(for="pDesc", data-bind="html: fields.desc")
        textarea.form-control.descInput(name="pDesc", wrap="soft", maxlength="4000", placeholder="Describe photo", data-bind="value: p.desc, valueUpdate: 'afterkeydown', event: {focus: descFocus, blur: descBlur}")
    .fieldWrap(data-bind="css: {hasContent: p.author().length}")
        label(for="pAuthor", data-bind="html: fields.author")
        input.form-control(name="pAuthor", type="text", maxlength="250", placeholder="Author", data-bind="value: p.author, valueUpdate: 'afterkeydown', event: {focus: inputlblfocus, blur: inputlblblur}")
    .fieldWrap(data-bind="css: {hasContent: p.source().length}")
        label(for="pSource", data-bind="html: fields.source")
        input.form-control(name="pSource", type="text", maxlength="250", placeholder="If you know the photo source (link, a book, etc.), necessary to specify it here", data-bind="value: p.source, valueUpdate: 'afterkeydown', event: {focus: inputlblfocus, blur: inputlblblur}")
    .fieldWrap(data-bind="css: {hasContent: p.address().length}")
        label(for="pAddr", data-bind="html: fields.address")
        input.form-control(name="pAddr", type="text", maxlength="250", placeholder="Do you know shooting adress?", data-bind="value: p.address, valueUpdate: 'afterkeydown', event: {focus: inputlblfocus, blur: inputlblblur}")
    .fieldWrap(data-bind="css: {hasContent: !!p.dir()}")
        label(for="pDir", data-bind="html: fields.dir")
        select.form-control(name="pDir", data-bind="css: {empty: !p.dir()}, options: fields.dirValsArr, value: p.dir, optionsText: function(item) {return fields.dirVals[item]}, optionsCaption: 'Chose shooting direction...'")
    //ko if: can.nowaterchange()
    div(style="display:table;margin:8px 0 -6px;")
        div(style="display:table-cell;padding-right:5px;")
            = "Allow user to change text on watermark of this photo and ability to download origin (current global setting for user - "
            strong(data-bind="text: p.user.nowaterchange()?'No':'Yes'")
            | )
        .btn-group.btn-group-sm(style="display:table-cell;width:65px;vertical-align:top;")
            button.btn.btn-primary.yes(type="button", data-bind="css: {active: !p.nowaterchange()}, click: nowaterchangeChange") Yes
            button.btn.btn-primary.no(type="button", data-bind="css: {active: !!p.nowaterchange()}, click: nowaterchangeChange") No
    // /ko
    //ko if: !can.watersign()
    .text-danger(style="margin:8px 0 -8px;")
        span.glyphicon.glyphicon-warning-sign
        |  Administrator has disabled for you ability to change watermark settings for this photo
    // /ko
    .watersingcontrol(data-bind="css: {deny: !can.watersign()}")
        .fieldWrap.asrow: span.panel-block(style="padding-bottom:3px")
            span.infoName(data-bind="html: fields.watersign.title+':'")
            label.radio-inline
                input(type="radio", name="watersignIndividual", value="false", data-bind="checked: watersignIndividual")
                span(data-bind="html: fields.watersign.profile")
                sup 1
            label.radio-inline
                input(type="radio", name="watersignIndividual", value="true", data-bind="checked: watersignIndividual")
                span(data-bind="html: fields.watersign.individual")
            br
            div(style="margin-top:7px;")
                span(data-bind="html: fields.watersign.option + ': '")
                .btn-group.btn-group-sm.disabled
                    button.btn.btn-primary.yes(type="button", data-bind="attr: {disabled: !p.watersignIndividual()}, css: {active: watersignOption()!==false}, click: watersignOptionChange") Yes
                    button.btn.btn-primary.no(type="button", data-bind="attr: {disabled: !p.watersignIndividual()}, css: {active: watersignOption()===false}, click: watersignOptionChange") No
                // ko if: !!watersignOption()
                .radio(style="margin-top:8px"): label
                    input(type="radio", name="watersign", value="true", data-bind="attr: {disabled: !p.watersignIndividual()}, checked: watersignOption")
                    span(data-bind="html: fields.watersign.default+' ('")
                    span(style="color:#777", data-bind="text: 'uploaded by ' + p.user.login()")
                    | )
                .radio(style="margin-top:0"): .input-group(style="")
                    input(type="radio", name="watersign", value="custom", data-bind="attr: {disabled: !p.watersignIndividual()}, checked: watersignOption")
                    span(style="display: table-cell; padding: 2px 9px 2px 0;", data-bind="html: fields.watersign.text")
                    input.form-control(type="text", style="width:422px;max-width:100%", data-bind="attr: {disabled: !p.watersignIndividual() || watersignOption()!=='custom'}, value: watersignCustom, symbols: {pattern:fields.watersignPattern,watch:p.watersignCustom,noMultiplySpace:true,maxLength:fields.watersignLength}, valueUpdate: 'input'")
                // /ko
            p.text-muted(style="margin:3px 0;padding-left:8px;line-height:1.1;font-size:11px;")
                sup(style="margin-left:-8px;") 1
                |  Specified setting by default apply to all your photo, where is no indivisual setting.
                span(style="display:inline-block;")  It can be changed on&nbsp;
                    a(target="_blank", data-bind="attr: {href: '/u/' + p.user.login() + '/settings'}") settings page
            p.text-muted(style="margin-bottom:0;padding-left:8px;line-height:1.1;font-size:11px;")
                sup(style="margin-left:-8px;") *
                |  If you change the watermark, photo will be sent to the queue for processing, that may take some time

        .fieldWrap.asrow: span.panel-block(style="padding-bottom:3px")
            span.infoName(data-bind="html: fields.downloadOrigin.title+':'")
            label.radio-inline
                input(type="radio", name="disallowDownloadOriginIndividual", value="false", data-bind="checked: disallowDownloadOriginIndividual")
                span(data-bind="html: fields.downloadOrigin.profile")
                sup 1
            label.radio-inline
                input(type="radio", name="disallowDownloadOriginIndividual", value="true", data-bind="checked: disallowDownloadOriginIndividual")
                span(data-bind="html: fields.downloadOrigin.individual")
            br
            div(style="margin-top:7px;")
                span(data-bind="html: fields.downloadOrigin.option + ': '")
                .btn-group.btn-group-sm.disabled
                    button.btn.btn-primary.yes(type="button", data-bind="attr: {disabled: !p.disallowDownloadOriginIndividual() || watersignOption()===false}, css: {active: !disallowDownloadOrigin()}, click: downloadOriginChange") Yes
                    button.btn.btn-primary.no(type="button", data-bind="attr: {disabled: !p.disallowDownloadOriginIndividual()|| watersignOption()===false}, css: {active: disallowDownloadOrigin()}, click: downloadOriginChange") No
            p.text-muted(style="margin-bottom:0;padding-left:8px;line-height:1.1;font-size:11px;")
                sup(style="margin-left:-8px;") *
                |  Prohibition of downloading original can be set only if photo have watermark text
            p.text-muted(style="margin:3px 0;padding-left:8px;line-height:1.1;font-size:11px;")
                sup(style="margin-left:-8px;") 1
                |  Specified setting by default apply to all your photo, where is no indivisual setting.
                span(style="display:inline-block;")  It can be changed on&nbsp;
                    a(target="_blank", data-bind="attr: {href: '/u/' + p.user.login() + '/settings'}") settings page
    .spanner
    | </script>